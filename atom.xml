<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨越的</title>
  
  
  <link href="./atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-03T08:37:29.466Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>No.1-263通讯第一天</title>
    <link href="http://yoursite.com/2020/08/03/No-1-263%E9%80%9A%E8%AE%AF%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>http://yoursite.com/2020/08/03/No-1-263%E9%80%9A%E8%AE%AF%E7%AC%AC%E4%B8%80%E5%A4%A9/</id>
    <published>2020-08-03T07:50:56.000Z</published>
    <updated>2020-08-03T08:37:29.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现在时间2020年8月3日下午15点52分，周一-这是依玉涛同学的内推进入的263网络的第一天"><a href="#现在时间2020年8月3日下午15点52分，周一-这是依玉涛同学的内推进入的263网络的第一天" class="headerlink" title="现在时间2020年8月3日下午15点52分，周一~这是依玉涛同学的内推进入的263网络的第一天"></a>现在时间2020年8月3日下午15点52分，周一<del>~</del>这是依玉涛同学的内推进入的263网络的第一天</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">周一的清晨总是这么不想起床，凭借着ios熟悉而又喧嚣的闹铃，我不甘的看着手机上豁然显示的是7点50分~</span><br><span class="line">淦，今天第一天入职。。。。。。于是乎，一个身在他乡的路人小伙子上演了今天的一天</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;现在时间2020年8月3日下午15点52分，周一-这是依玉涛同学的内推进入的263网络的第一天&quot;&gt;&lt;a href=&quot;#现在时间2020年8月3日下午15点52分，周一-这是依玉涛同学的内推进入的263网络的第一天&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
    
      <category term="No.1 263网络第一天" scheme="http://yoursite.com/tags/No-1-263%E7%BD%91%E7%BB%9C%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/08/03/hello-world/"/>
    <id>http://yoursite.com/2020/08/03/hello-world/</id>
    <published>2020-08-03T07:45:22.965Z</published>
    <updated>2020-08-03T07:45:22.966Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>客户端优化—CSS/论抗锯齿</title>
    <link href="http://yoursite.com/2020/06/08/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BC%98%E5%8C%96%E2%80%94CSS-%E8%AE%BA%E6%8A%97%E9%94%AF%E9%BD%BF/"/>
    <id>http://yoursite.com/2020/06/08/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BC%98%E5%8C%96%E2%80%94CSS-%E8%AE%BA%E6%8A%97%E9%94%AF%E9%BD%BF/</id>
    <published>2020-06-08T09:19:00.000Z</published>
    <updated>2020-08-03T08:57:19.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一·-CSS-抗锯齿技术"><a href="#一·-CSS-抗锯齿技术" class="headerlink" title="一· #CSS 抗锯齿技术"></a>一· #CSS 抗锯齿技术</h2><h6 id="字体平滑属性属于早期的-CSS-规范，后来因为种种原因又被移除了。不过现在仍可以通过前缀属性兼容（如-webkit-font-smoothing）。一般来说，字体平滑有三个值可选，none、subpixel-antialiased、antialiased。值的作用正如其名，分别是无抗锯齿，亚像素级抗锯齿和（全像素）抗锯齿。亚像素抗锯齿会使字体呈现稍细，而像素级抗锯齿则使字体呈现过粗。黑色背景下则反之。倒不必因为知道它就必须使用上——这三种方式有各自的优点和缺陷。一般来说，扔掉这个属性，让浏览器自行判断字体渲染的方式就可以了。如果你引入了特殊字体（比如印刷字体）进行平滑处理。（应该国内排版emmmmmm，能自由发挥的范围应该很有限）"><a href="#字体平滑属性属于早期的-CSS-规范，后来因为种种原因又被移除了。不过现在仍可以通过前缀属性兼容（如-webkit-font-smoothing）。一般来说，字体平滑有三个值可选，none、subpixel-antialiased、antialiased。值的作用正如其名，分别是无抗锯齿，亚像素级抗锯齿和（全像素）抗锯齿。亚像素抗锯齿会使字体呈现稍细，而像素级抗锯齿则使字体呈现过粗。黑色背景下则反之。倒不必因为知道它就必须使用上——这三种方式有各自的优点和缺陷。一般来说，扔掉这个属性，让浏览器自行判断字体渲染的方式就可以了。如果你引入了特殊字体（比如印刷字体）进行平滑处理。（应该国内排版emmmmmm，能自由发挥的范围应该很有限）" class="headerlink" title="字体平滑属性属于早期的 CSS 规范，后来因为种种原因又被移除了。不过现在仍可以通过前缀属性兼容（如 -webkit-font-smoothing）。一般来说，字体平滑有三个值可选，none、subpixel-antialiased、antialiased。值的作用正如其名，分别是无抗锯齿，亚像素级抗锯齿和（全像素）抗锯齿。亚像素抗锯齿会使字体呈现稍细，而像素级抗锯齿则使字体呈现过粗。黑色背景下则反之。倒不必因为知道它就必须使用上——这三种方式有各自的优点和缺陷。一般来说，扔掉这个属性，让浏览器自行判断字体渲染的方式就可以了。如果你引入了特殊字体（比如印刷字体）进行平滑处理。（应该国内排版emmmmmm，能自由发挥的范围应该很有限）"></a><a href="#%E5%AD%97%E4%BD%93%E5%B9%B3%E6%BB%91%E5%B1%9E%E6%80%A7%E5%B1%9E%E4%BA%8E%E6%97%A9%E6%9C%9F%E7%9A%84-CSS-%E8%A7%84%E8%8C%83%EF%BC%8C%E5%90%8E%E6%9D%A5%E5%9B%A0%E4%B8%BA%E7%A7%8D%E7%A7%8D%E5%8E%9F%E5%9B%A0%E5%8F%88%E8%A2%AB%E7%A7%BB%E9%99%A4%E4%BA%86%E3%80%82%E4%B8%8D%E8%BF%87%E7%8E%B0%E5%9C%A8%E4%BB%8D%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%89%8D%E7%BC%80%E5%B1%9E%E6%80%A7%E5%85%BC%E5%AE%B9%EF%BC%88%E5%A6%82-webkit-font-smoothing%EF%BC%89%E3%80%82%E4%B8%80%E8%88%AC%E6%9D%A5%E8%AF%B4%EF%BC%8C%E5%AD%97%E4%BD%93%E5%B9%B3%E6%BB%91%E6%9C%89%E4%B8%89%E4%B8%AA%E5%80%BC%E5%8F%AF%E9%80%89%EF%BC%8Cnone%E3%80%81subpixel-antialiased%E3%80%81antialiased%E3%80%82%E5%80%BC%E7%9A%84%E4%BD%9C%E7%94%A8%E6%AD%A3%E5%A6%82%E5%85%B6%E5%90%8D%EF%BC%8C%E5%88%86%E5%88%AB%E6%98%AF%E6%97%A0%E6%8A%97%E9%94%AF%E9%BD%BF%EF%BC%8C%E4%BA%9A%E5%83%8F%E7%B4%A0%E7%BA%A7%E6%8A%97%E9%94%AF%E9%BD%BF%E5%92%8C%EF%BC%88%E5%85%A8%E5%83%8F%E7%B4%A0%EF%BC%89%E6%8A%97%E9%94%AF%E9%BD%BF%E3%80%82%E4%BA%9A%E5%83%8F%E7%B4%A0%E6%8A%97%E9%94%AF%E9%BD%BF%E4%BC%9A%E4%BD%BF%E5%AD%97%E4%BD%93%E5%91%88%E7%8E%B0%E7%A8%8D%E7%BB%86%EF%BC%8C%E8%80%8C%E5%83%8F%E7%B4%A0%E7%BA%A7%E6%8A%97%E9%94%AF%E9%BD%BF%E5%88%99%E4%BD%BF%E5%AD%97%E4%BD%93%E5%91%88%E7%8E%B0%E8%BF%87%E7%B2%97%E3%80%82%E9%BB%91%E8%89%B2%E8%83%8C%E6%99%AF%E4%B8%8B%E5%88%99%E5%8F%8D%E4%B9%8B%E3%80%82%E5%80%92%E4%B8%8D%E5%BF%85%E5%9B%A0%E4%B8%BA%E7%9F%A5%E9%81%93%E5%AE%83%E5%B0%B1%E5%BF%85%E9%A1%BB%E4%BD%BF%E7%94%A8%E4%B8%8A%E2%80%94%E2%80%94%E8%BF%99%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%9C%89%E5%90%84%E8%87%AA%E7%9A%84%E4%BC%98%E7%82%B9%E5%92%8C%E7%BC%BA%E9%99%B7%E3%80%82%E4%B8%80%E8%88%AC%E6%9D%A5%E8%AF%B4%EF%BC%8C%E6%89%94%E6%8E%89%E8%BF%99%E4%B8%AA%E5%B1%9E%E6%80%A7%EF%BC%8C%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E8%A1%8C%E5%88%A4%E6%96%AD%E5%AD%97%E4%BD%93%E6%B8%B2%E6%9F%93%E7%9A%84%E6%96%B9%E5%BC%8F%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%BC%95%E5%85%A5%E4%BA%86%E7%89%B9%E6%AE%8A%E5%AD%97%E4%BD%93%EF%BC%88%E6%AF%94%E5%A6%82%E5%8D%B0%E5%88%B7%E5%AD%97%E4%BD%93%EF%BC%89%E8%BF%9B%E8%A1%8C%E5%B9%B3%E6%BB%91%E5%A4%84%E7%90%86%E3%80%82%EF%BC%88%E5%BA%94%E8%AF%A5%E5%9B%BD%E5%86%85%E6%8E%92%E7%89%88emmmmmm%EF%BC%8C%E8%83%BD%E8%87%AA%E7%94%B1%E5%8F%91%E6%8C%A5%E7%9A%84%E8%8C%83%E5%9B%B4%E5%BA%94%E8%AF%A5%E5%BE%88%E6%9C%89%E9%99%90%EF%BC%89" title="字体平滑属性属于早期的 CSS 规范，后来因为种种原因又被移除了。不过现在仍可以通过前缀属性兼容（如 -webkit-font-smoothing）。一般来说，字体平滑有三个值可选，none、subpixel-antialiased、antialiased。值的作用正如其名，分别是无抗锯齿，亚像素级抗锯齿和（全像素）抗锯齿。亚像素抗锯齿会使字体呈现稍细，而像素级抗锯齿则使字体呈现过粗。黑色背景下则反之。倒不必因为知道它就必须使用上——这三种方式有各自的优点和缺陷。一般来说，扔掉这个属性，让浏览器自行判断字体渲染的方式就可以了。如果你引入了特殊字体（比如印刷字体）进行平滑处理。（应该国内排版emmmmmm，能自由发挥的范围应该很有限）"></a>字体平滑属性属于早期的 CSS 规范，后来因为种种原因又被移除了。不过现在仍可以通过前缀属性兼容（如 -webkit-font-smoothing）。一般来说，字体平滑有三个值可选，none、subpixel-antialiased、antialiased。值的作用正如其名，分别是无抗锯齿，亚像素级抗锯齿和（全像素）抗锯齿。亚像素抗锯齿会使字体呈现稍细，而像素级抗锯齿则使字体呈现过粗。黑色背景下则反之。倒不必因为知道它就必须使用上——这三种方式有各自的优点和缺陷。一般来说，扔掉这个属性，让浏览器自行判断字体渲染的方式就可以了。如果你引入了特殊字体（比如印刷字体）进行平滑处理。（应该国内排版emmmmmm，能自由发挥的范围应该很有限）</h6><p><code>CSS Image-Rendering</code></p><h6 id="Image-Rendering-属性用于设置图像缩放算法"><a href="#Image-Rendering-属性用于设置图像缩放算法" class="headerlink" title="Image-Rendering 属性用于设置图像缩放算法"></a><a href="#Image-Rendering-%E5%B1%9E%E6%80%A7%E7%94%A8%E4%BA%8E%E8%AE%BE%E7%BD%AE%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95" title="Image-Rendering 属性用于设置图像缩放算法"></a>Image-Rendering 属性用于设置图像缩放算法</h6><h6 id="Pixelated-值设置之后，浏览器不会对边缘进行平滑处理，而-Auto-则对整幅图像进行柔和处理。也就是说，使用-Transform-Scale-放大图片，浏览器会应用默认的平滑缩放算法（可能是双线性插值之类的）-不过大部分是浏览器对多个-Scale-串联进行了优化，部分内部使用了某种不损失图像信息的采样算法，总之不改变图片尺寸又想使用平滑图片是行不通的。"><a href="#Pixelated-值设置之后，浏览器不会对边缘进行平滑处理，而-Auto-则对整幅图像进行柔和处理。也就是说，使用-Transform-Scale-放大图片，浏览器会应用默认的平滑缩放算法（可能是双线性插值之类的）-不过大部分是浏览器对多个-Scale-串联进行了优化，部分内部使用了某种不损失图像信息的采样算法，总之不改变图片尺寸又想使用平滑图片是行不通的。" class="headerlink" title="Pixelated 值设置之后，浏览器不会对边缘进行平滑处理，而 Auto 则对整幅图像进行柔和处理。也就是说，使用 Transform Scale 放大图片，浏览器会应用默认的平滑缩放算法（可能是双线性插值之类的）,不过大部分是浏览器对多个 Scale 串联进行了优化，部分内部使用了某种不损失图像信息的采样算法，总之不改变图片尺寸又想使用平滑图片是行不通的。"></a><a href="#Pixelated-%E5%80%BC%E8%AE%BE%E7%BD%AE%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8D%E4%BC%9A%E5%AF%B9%E8%BE%B9%E7%BC%98%E8%BF%9B%E8%A1%8C%E5%B9%B3%E6%BB%91%E5%A4%84%E7%90%86%EF%BC%8C%E8%80%8C-Auto-%E5%88%99%E5%AF%B9%E6%95%B4%E5%B9%85%E5%9B%BE%E5%83%8F%E8%BF%9B%E8%A1%8C%E6%9F%94%E5%92%8C%E5%A4%84%E7%90%86%E3%80%82%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%AF%B4%EF%BC%8C%E4%BD%BF%E7%94%A8-Transform-Scale-%E6%94%BE%E5%A4%A7%E5%9B%BE%E7%89%87%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E5%BA%94%E7%94%A8%E9%BB%98%E8%AE%A4%E7%9A%84%E5%B9%B3%E6%BB%91%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95%EF%BC%88%E5%8F%AF%E8%83%BD%E6%98%AF%E5%8F%8C%E7%BA%BF%E6%80%A7%E6%8F%92%E5%80%BC%E4%B9%8B%E7%B1%BB%E7%9A%84%EF%BC%89-%E4%B8%8D%E8%BF%87%E5%A4%A7%E9%83%A8%E5%88%86%E6%98%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E5%A4%9A%E4%B8%AA-Scale-%E4%B8%B2%E8%81%94%E8%BF%9B%E8%A1%8C%E4%BA%86%E4%BC%98%E5%8C%96%EF%BC%8C%E9%83%A8%E5%88%86%E5%86%85%E9%83%A8%E4%BD%BF%E7%94%A8%E4%BA%86%E6%9F%90%E7%A7%8D%E4%B8%8D%E6%8D%9F%E5%A4%B1%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E7%9A%84%E9%87%87%E6%A0%B7%E7%AE%97%E6%B3%95%EF%BC%8C%E6%80%BB%E4%B9%8B%E4%B8%8D%E6%94%B9%E5%8F%98%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8%E5%8F%88%E6%83%B3%E4%BD%BF%E7%94%A8%E5%B9%B3%E6%BB%91%E5%9B%BE%E7%89%87%E6%98%AF%E8%A1%8C%E4%B8%8D%E9%80%9A%E7%9A%84%E3%80%82" title="Pixelated 值设置之后，浏览器不会对边缘进行平滑处理，而 Auto 则对整幅图像进行柔和处理。也就是说，使用 Transform Scale 放大图片，浏览器会应用默认的平滑缩放算法（可能是双线性插值之类的）,不过大部分是浏览器对多个 Scale 串联进行了优化，部分内部使用了某种不损失图像信息的采样算法，总之不改变图片尺寸又想使用平滑图片是行不通的。"></a>Pixelated 值设置之后，浏览器不会对边缘进行平滑处理，而 Auto 则对整幅图像进行柔和处理。也就是说，使用 Transform Scale 放大图片，浏览器会应用默认的平滑缩放算法（可能是双线性插值之类的）,不过大部分是浏览器对多个 Scale 串联进行了优化，部分内部使用了某种不损失图像信息的采样算法，总之不改变图片尺寸又想使用平滑图片是行不通的。</h6><p><code>硬件加速抗锯齿</code></p><h6 id="关于使用浏览器的硬件加速抗锯齿功能，是我在试验-PXAA-时的偶得（不过已经有博客介绍过了）。当元素通过-Transform-Rotate-旋转之后，如果此元素是被-GPU-渲染的，那么会应用浏览器对应-GPU-的抗锯齿属性——比方说你用-GTX-1060ti-运行浏览器，那么相关配置就能在英伟达控制面板中找到（不过这有相当程度是我的猜测，待验证）。听起来好像有点复杂，看下面例子就一目了然了："><a href="#关于使用浏览器的硬件加速抗锯齿功能，是我在试验-PXAA-时的偶得（不过已经有博客介绍过了）。当元素通过-Transform-Rotate-旋转之后，如果此元素是被-GPU-渲染的，那么会应用浏览器对应-GPU-的抗锯齿属性——比方说你用-GTX-1060ti-运行浏览器，那么相关配置就能在英伟达控制面板中找到（不过这有相当程度是我的猜测，待验证）。听起来好像有点复杂，看下面例子就一目了然了：" class="headerlink" title="关于使用浏览器的硬件加速抗锯齿功能，是我在试验 PXAA 时的偶得（不过已经有博客介绍过了）。当元素通过 Transform:Rotate 旋转之后，如果此元素是被 GPU 渲染的，那么会应用浏览器对应 GPU 的抗锯齿属性——比方说你用 GTX 1060ti 运行浏览器，那么相关配置就能在英伟达控制面板中找到（不过这有相当程度是我的猜测，待验证）。听起来好像有点复杂，看下面例子就一目了然了："></a><a href="#%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F%E6%8A%97%E9%94%AF%E9%BD%BF%E5%8A%9F%E8%83%BD%EF%BC%8C%E6%98%AF%E6%88%91%E5%9C%A8%E8%AF%95%E9%AA%8C-PXAA-%E6%97%B6%E7%9A%84%E5%81%B6%E5%BE%97%EF%BC%88%E4%B8%8D%E8%BF%87%E5%B7%B2%E7%BB%8F%E6%9C%89%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D%E8%BF%87%E4%BA%86%EF%BC%89%E3%80%82%E5%BD%93%E5%85%83%E7%B4%A0%E9%80%9A%E8%BF%87-Transform-Rotate-%E6%97%8B%E8%BD%AC%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%AD%A4%E5%85%83%E7%B4%A0%E6%98%AF%E8%A2%AB-GPU-%E6%B8%B2%E6%9F%93%E7%9A%84%EF%BC%8C%E9%82%A3%E4%B9%88%E4%BC%9A%E5%BA%94%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E5%BA%94-GPU-%E7%9A%84%E6%8A%97%E9%94%AF%E9%BD%BF%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94%E6%AF%94%E6%96%B9%E8%AF%B4%E4%BD%A0%E7%94%A8-GTX-1060ti-%E8%BF%90%E8%A1%8C%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%8C%E9%82%A3%E4%B9%88%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E5%B0%B1%E8%83%BD%E5%9C%A8%E8%8B%B1%E4%BC%9F%E8%BE%BE%E6%8E%A7%E5%88%B6%E9%9D%A2%E6%9D%BF%E4%B8%AD%E6%89%BE%E5%88%B0%EF%BC%88%E4%B8%8D%E8%BF%87%E8%BF%99%E6%9C%89%E7%9B%B8%E5%BD%93%E7%A8%8B%E5%BA%A6%E6%98%AF%E6%88%91%E7%9A%84%E7%8C%9C%E6%B5%8B%EF%BC%8C%E5%BE%85%E9%AA%8C%E8%AF%81%EF%BC%89%E3%80%82%E5%90%AC%E8%B5%B7%E6%9D%A5%E5%A5%BD%E5%83%8F%E6%9C%89%E7%82%B9%E5%A4%8D%E6%9D%82%EF%BC%8C%E7%9C%8B%E4%B8%8B%E9%9D%A2%E4%BE%8B%E5%AD%90%E5%B0%B1%E4%B8%80%E7%9B%AE%E4%BA%86%E7%84%B6%E4%BA%86%EF%BC%9A" title="关于使用浏览器的硬件加速抗锯齿功能，是我在试验 PXAA 时的偶得（不过已经有博客介绍过了）。当元素通过 Transform:Rotate 旋转之后，如果此元素是被 GPU 渲染的，那么会应用浏览器对应 GPU 的抗锯齿属性——比方说你用 GTX 1060ti 运行浏览器，那么相关配置就能在英伟达控制面板中找到（不过这有相当程度是我的猜测，待验证）。听起来好像有点复杂，看下面例子就一目了然了："></a>关于使用浏览器的硬件加速抗锯齿功能，是我在试验 PXAA 时的偶得（不过已经有博客介绍过了）。当元素通过 Transform:Rotate 旋转之后，如果此元素是被 GPU 渲染的，那么会应用浏览器对应 GPU 的抗锯齿属性——比方说你用 GTX 1060ti 运行浏览器，那么相关配置就能在英伟达控制面板中找到（不过这有相当程度是我的猜测，待验证）。听起来好像有点复杂，看下面例子就一目了然了：</h6><p><img src="https://user-gold-cdn.xitu.io/2020/6/5/1728336e2ad7e114?imageslim" alt="Image text">;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一·-CSS-抗锯齿技术&quot;&gt;&lt;a href=&quot;#一·-CSS-抗锯齿技术&quot; class=&quot;headerlink&quot; title=&quot;一· #CSS 抗锯齿技术&quot;&gt;&lt;/a&gt;一· #CSS 抗锯齿技术&lt;/h2&gt;&lt;h6 id=&quot;字体平滑属性属于早期的-CSS-规范，后来因为
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>针对低配置客户端的优化打法—CSS/论抗锯齿</title>
    <link href="http://yoursite.com/2020/06/07/%E9%92%88%E5%AF%B9%E4%BD%8E%E9%85%8D%E7%BD%AE%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E4%BC%98%E5%8C%96%E6%89%93%E6%B3%95%E2%80%94CSS-%E8%AE%BA%E6%8A%97%E9%94%AF%E9%BD%BF/"/>
    <id>http://yoursite.com/2020/06/07/%E9%92%88%E5%AF%B9%E4%BD%8E%E9%85%8D%E7%BD%AE%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E4%BC%98%E5%8C%96%E6%89%93%E6%B3%95%E2%80%94CSS-%E8%AE%BA%E6%8A%97%E9%94%AF%E9%BD%BF/</id>
    <published>2020-06-07T03:50:08.000Z</published>
    <updated>2020-08-03T08:57:23.489Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="Create-先说问题，有些页面在客户端动画卡顿。"><a href="#Create-先说问题，有些页面在客户端动画卡顿。" class="headerlink" title="Create 先说问题，有些页面在客户端动画卡顿。"></a>Create 先说问题，有些页面在客户端动画卡顿。</h3><p>怎么解决呢，双方比较简直就和买家秀和卖家秀一样</p><h3 id="老生常谈之硬件加速"><a href="#老生常谈之硬件加速" class="headerlink" title="老生常谈之硬件加速"></a><a href="#%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88%E4%B9%8B%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F" title="老生常谈之硬件加速"></a>老生常谈之硬件加速</h3><p>就是所谓的 浏览器内置加载VS硬件加载（GPU：他娘的太冷了，终于轮到我发热了么），将浏览器的渲染过程交给GPU处理，<br>而不是使用自带的比较慢的渲染器。这样就可以使得animation与transition更加顺畅。</p><p>我们可以在浏览器中用css开启硬件加速，使GPU (Graphics Processing Unit) 发挥功能，从而提升性能</p><p>现在大多数客户端（电脑，手机，老旧机顶盒{Android&gt;=4.0,4.0以下回归ie6深渊}）的显卡都支持硬件加速。鉴于此，我们可以发挥GPU的力量，从而使我们的网站或应用表现的更为流畅。</p><h3 id="那么咱么首先翻翻谷歌硬件加速原理"><a href="#那么咱么首先翻翻谷歌硬件加速原理" class="headerlink" title="那么咱么首先翻翻谷歌硬件加速原理"></a><a href="#%E9%82%A3%E4%B9%88%E5%92%B1%E4%B9%88%E9%A6%96%E5%85%88%E7%BF%BB%E7%BF%BB%E8%B0%B7%E6%AD%8C%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F%E5%8E%9F%E7%90%86" title="那么咱么首先翻翻谷歌硬件加速原理"></a>那么咱么首先翻翻谷歌硬件加速原理</h3><p>浏览器接收到页面文档后，会将文档中的标记语言解析为DOM树。DOM树和CSS结合后形成浏览器构建页面的渲染树。渲染树中包含了大量的渲染元素，每一个渲染元素会被分到一个图层中，每个图层又会被加载到GPU形成渲染纹理，而图层在GPU中transform 是不会触发 repaint 的，最终这些使用 transform 的图层都会由独立的合成器进程进行处理。</p><p>简单来说就是文本渲染归浏览器本体，脱离图层由GPU硬件来渲染，transform 属性不会触发浏览器的 repaint（重绘），transform 动画由GPU控制，支持硬件加速，并不需要软件方面的渲染，而绝对定位absolute中的 left 和 top 则会一直触发 repaint（重绘）。</p><p>那可能有人会问半脱离文档和全脱离文档流不也算脱离文档图层嘛，还不能算的</p><p>浏览器什么时候会创建一个独立的复合图层呢？事实上一般是在以下几种情况下：</p><p>1 3D 或者 CSS transform<br>2 <video> 和 <canvas> 标签<br>3 CSS filters<br>4 元素覆盖时，比如使用了 z-index 属性  </p><h3 id="开启按钮之-指鹿为马"><a href="#开启按钮之-指鹿为马" class="headerlink" title="开启按钮之 指鹿为马"></a><a href="#%E5%BC%80%E5%90%AF%E6%8C%89%E9%92%AE%E4%B9%8B-%E6%8C%87%E9%B9%BF%E4%B8%BA%E9%A9%AC" title="开启按钮之 指鹿为马"></a>开启按钮之 指鹿为马</h3><p>CSS animations, transforms 以及 transitions 不会自动开启GPU加速，而是由浏览器的缓慢的软件渲染引擎来执行。那我们怎样才可以切换到GPU模式呢，很多浏览器提供了某些触发的CSS规则。</p><p>现在，像Chrome, FireFox, Safari, IE9+和最新版本的Opera都支持硬件加速，当它们检测到页面中某个DOM元素应用了某些CSS规则时就会开启，最显著的特征的元素的3D变换。</p><p>在一些情况下，我们并不需要对元素应用3D变换的效果，那怎么办呢？这时候我们可以使用个小技巧“欺骗”浏览器来开启硬件加速（指鹿为马）。</p><p>虽然我们可能不想对元素应用3D变换，可我们一样可以开启3D引擎。举个栗子：transform: translateZ(0); 来开启硬件加速 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.cube &#123;  </span><br><span class="line">  </span><br><span class="line"> -webkit-transform: translateZ(0);  </span><br><span class="line">  </span><br><span class="line"> -moz-transform: translateZ(0);  </span><br><span class="line">  </span><br><span class="line"> -ms-transform: translateZ(0);  </span><br><span class="line">  </span><br><span class="line"> -o-transform: translateZ(0);  </span><br><span class="line">  </span><br><span class="line"> transform: translateZ(0);  </span><br><span class="line">  </span><br><span class="line"> &#x2F;\*GPU劳工：指鹿为马\*&#x2F;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="使用硬件加速的问题-（国不将国）"><a href="#使用硬件加速的问题-（国不将国）" class="headerlink" title="使用硬件加速的问题 （国不将国）"></a><a href="#%E4%BD%BF%E7%94%A8%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F%E7%9A%84%E9%97%AE%E9%A2%98-%EF%BC%88%E5%9B%BD%E4%B8%8D%E5%B0%86%E5%9B%BD%EF%BC%89" title="使用硬件加速的问题 （国不将国）"></a>使用硬件加速的问题 （国不将国）</h3><p>1内存。如果GPU加载了大量的纹理，那么很容易就会发生内容问题，这一点在移动端浏览器上尤为明显，所以，一定要牢记不要让页面的每个元素都使用硬件加速。</p><p>2使用GPU渲染会影响字体的抗锯齿效果。这是因为GPU和CPU具有不同的渲染机制。即使最终硬件加速停止了，文本还是会在动画期间显示得很模糊。</p><p>总结</p><p>慎行。如果通过你的测试，结果确是提高了性能，你才可以使用这些方法。使用GPU可能会导致严重的性能问题，因为它增加了内存的使用，而且它会减少移动端设备的电池寿命。(一切为客户体验服务第一位的前端之说)</p><p>下面是华为机顶盒强行硬件加载坏掉的栗子。</p><p><img src="https://yangyue6531267.github.io/yangyue.github.com/mohu.jpg" alt="Image text">;</p><p>下一篇咱们讨论一下css抗锯齿优化</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Create-先说问题，有些页面在客户端动画卡顿。&quot;&gt;&lt;a href=&quot;#Create-先说问题，有些页面在客户端动画卡顿。&quot; class=&quot;headerlink&quot; title=&quot;Create 先说问题，有些页面在客户端动画卡顿
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>页面移动焦点小组件</title>
    <link href="http://yoursite.com/2020/06/05/%E9%A1%B5%E9%9D%A2%E7%A7%BB%E5%8A%A8%E7%84%A6%E7%82%B9%E5%B0%8F%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/06/05/%E9%A1%B5%E9%9D%A2%E7%A7%BB%E5%8A%A8%E7%84%A6%E7%82%B9%E5%B0%8F%E7%BB%84%E4%BB%B6/</id>
    <published>2020-06-05T08:52:56.000Z</published>
    <updated>2020-08-03T09:10:16.297Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>近期开发极光tv的项目，需求在原生js支持下单页面动态渲染，借此优化重构了一下当时冗余的遥控器上下键焦点功能</p><h3 id="Create-直接上代码"><a href="#Create-直接上代码" class="headerlink" title="Create 直接上代码"></a><a href="#Create-%E7%9B%B4%E6%8E%A5%E4%B8%8A%E4%BB%A3%E7%A0%81" title="Create 直接上代码"></a>Create 直接上代码</h3><p>value.component为数据个体组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 查询执行焦点  </span><br><span class="line">&#x2F;&#x2F; 查询执行焦点</span><br><span class="line">function focused(val) &#123;</span><br><span class="line">  if (val &#x3D;&#x3D; &#39;down&#39;) &#123;</span><br><span class="line">    value.componentNumber++</span><br><span class="line">  &#125; else if (val &#x3D;&#x3D; &#39;up&#39;) &#123;</span><br><span class="line">    value.componentNumber--</span><br><span class="line">  &#125; else if (typeof val &#x3D;&#x3D; &#39;number&#39;) &#123;</span><br><span class="line">    value.componentNumber &#x3D; val</span><br><span class="line">  &#125;</span><br><span class="line">  var code &#x3D; value.component[value.componentNumber];</span><br><span class="line">  var codePyte</span><br><span class="line">  switch (code) &#123;</span><br><span class="line">    case &quot;topContent&quot;: &#x2F;&#x2F;顶部</span><br><span class="line">      codePyte &#x3D; topContent</span><br><span class="line">      break;</span><br><span class="line">    case &quot;indexSingle&quot;: &#x2F;&#x2F;上选集</span><br><span class="line">      codePyte &#x3D; indexSingle</span><br><span class="line">      break;</span><br><span class="line">    case &quot;indexTotal&quot;: &#x2F;&#x2F;下选集</span><br><span class="line">      codePyte &#x3D; indexTotal</span><br><span class="line">      break;</span><br><span class="line">    case &quot;specialList&quot;: &#x2F;&#x2F;专题</span><br><span class="line">      codePyte &#x3D; specialList</span><br><span class="line">      break;</span><br><span class="line">    case &quot;assetList&quot;: &#x2F;&#x2F;推荐</span><br><span class="line">      codePyte &#x3D; assetList</span><br><span class="line">      break;</span><br><span class="line">    case &quot;indexNews&quot;: &#x2F;&#x2F;推荐</span><br><span class="line">      codePyte &#x3D; indexNews</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line">  areaObj &#x3D; codePyte;</span><br><span class="line">  codePyte.addCss(true)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单组件上下键脱离控制调用"><a href="#单组件上下键脱离控制调用" class="headerlink" title="单组件上下键脱离控制调用"></a><a href="#%E5%8D%95%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%B8%8B%E9%94%AE%E8%84%B1%E7%A6%BB%E6%8E%A7%E5%88%B6%E8%B0%83%E7%94%A8" title="单组件上下键脱离控制调用"></a>单组件上下键脱离控制调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">down or up: function () &#123;</span><br><span class="line">    this.removeCss();</span><br><span class="line">    focused(&#39;down&#39;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="键值控制接入"><a href="#键值控制接入" class="headerlink" title="键值控制接入"></a><a href="#%E9%94%AE%E5%80%BC%E6%8E%A7%E5%88%B6%E6%8E%A5%E5%85%A5" title="键值控制接入"></a>键值控制接入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">onKeyPress &#x3D; function (keyCode) &#123;</span><br><span class="line">  switch (keyCode) &#123;</span><br><span class="line">    case &quot;up&quot;: &#x2F;&#x2F;上边</span><br><span class="line">      areaObj.up();</span><br><span class="line">      break;</span><br><span class="line">    case &quot;down&quot;: &#x2F;&#x2F;下边</span><br><span class="line">      areaObj.down();</span><br><span class="line">      break;</span><br><span class="line">    case &quot;left&quot;: &#x2F;&#x2F;左边</span><br><span class="line">      areaObj.left();</span><br><span class="line">      break;</span><br><span class="line">    case &quot;right&quot;: &#x2F;&#x2F;右边</span><br><span class="line">      areaObj.right();</span><br><span class="line">      break;</span><br><span class="line">    case &quot;back&quot;:</span><br><span class="line">      &#x2F;&#x2F; player.stop();</span><br><span class="line">      if (areaObj !&#x3D; descriptionBox) &#123;</span><br><span class="line">        exit();</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        areaObj.back()</span><br><span class="line">      &#125;</span><br><span class="line">      break;</span><br><span class="line">    case &quot;enter&quot;:</span><br><span class="line">      areaObj.enter();</span><br><span class="line">      break;</span><br><span class="line">    case &quot;home&quot;:</span><br><span class="line">      areaObj.home();</span><br><span class="line">      break;</span><br><span class="line">    case &quot;menu&quot;:</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="组件手动删除方法"><a href="#组件手动删除方法" class="headerlink" title="组件手动删除方法"></a>组件手动删除方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">value：组件名</span><br><span class="line">removeArray: function (value) &#123;</span><br><span class="line">    var index &#x3D; this.component.indexOf(value);</span><br><span class="line">    if (index &gt; -1) &#123;</span><br><span class="line">      this.component.splice(index, 1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">删除组件对应的页面不渲染</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;近期开发极光tv的项目，需求在原生js支持下单页面动态渲染，借此优化重构了一下当时冗余的遥控器上下键焦点功能&lt;/p&gt;
&lt;h3 id=&quot;Create-直接上代码&quot;&gt;&lt;a href=&quot;#Create-直接上代码&quot; class=&quot;headerl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>简单实现一个类vue的数据双向绑定</title>
    <link href="http://yoursite.com/2019/10/02/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%B1%BBvue%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <id>http://yoursite.com/2019/10/02/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%B1%BBvue%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</id>
    <published>2019-10-02T02:17:14.000Z</published>
    <updated>2020-08-03T09:06:46.976Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="Object-defineProperties-模拟实现Vue的绑定原理"><a href="#Object-defineProperties-模拟实现Vue的绑定原理" class="headerlink" title="Object.defineProperties()模拟实现Vue的绑定原理"></a>Object.defineProperties()模拟实现Vue的绑定原理</h3><h4 id="咱们先写一个类似的html"><a href="#咱们先写一个类似的html" class="headerlink" title="咱们先写一个类似的html"></a>咱们先写一个类似的html</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h5&gt;Vue&lt;&#x2F;h5&gt;</span><br><span class="line">        &lt;p&gt;计数:&lt;span&gt;&#123;&#123;count&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;h5&gt;hello word&lt;&#x2F;h5&gt;</span><br><span class="line">        &lt;p&gt;计次:&lt;span&gt;&#123;&#123;num&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p&gt;计数:&lt;span&gt;&#123;&#123;count&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="然后实现一个类obsover的函数"><a href="#然后实现一个类obsover的函数" class="headerlink" title="然后实现一个类obsover的函数"></a>然后实现一个类obsover的函数</h3><p>一、改造data对象的属性，并保护data中的每个属性<br>使用Object.keys来遍历data的属性名;Vue的绑定原理，保护data属性，并创建get,set方法这里因为不确定data里面有多少个属性，所以这里使用for of 循环遍历data的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var data &#x3D; &#123;</span><br><span class="line">        num: 2,</span><br><span class="line">        count: 1,</span><br><span class="line">    &#125;;</span><br><span class="line">    var keys &#x3D; Object.keys(data);</span><br><span class="line">    console.log(keys);</span><br><span class="line"></span><br><span class="line">    for (var key of keys) &#123;</span><br><span class="line">        (function (key) &#123;</span><br><span class="line">            Object.defineProperties(data, &#123;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;保护当前的变量，定义一个&quot;_key&quot;变量来保护原变量</span><br><span class="line">            &#x2F;&#x2F;在定义对象时，属性名禁止使用模板字符串  所以不能用&#96;_$&#123;key&#125;&#96;定义属性名</span><br><span class="line">            &#x2F;&#x2F;在定义对象时，属性名禁止使用拼接字符串  所以不能用 “_”+&#123;key&#125;定义属性名</span><br><span class="line">            &#x2F;&#x2F;ES6语法新语法，专门用于动态生成属性名，这里只能使用[拼接字符串或模板字符串]的方式定义属性名</span><br><span class="line"></span><br><span class="line">                [&#96;_&#96; + key]: &#123;</span><br><span class="line">                    value: data[key],</span><br><span class="line">                    writable: true,</span><br><span class="line">                    enumerable: false, &#x2F;&#x2F;半隐藏</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;用一个和当前属性同名的访问器属性，替代data中的原</span><br><span class="line">                普通属性</span><br><span class="line">                [key]: &#123;</span><br><span class="line">                    get() &#123;</span><br><span class="line">                        return this[&#96;_$&#123;key&#125;&#96;];</span><br><span class="line">                    &#125;,</span><br><span class="line">                    set(value) &#123;</span><br><span class="line">                        this[&#96;_$&#123;key&#125;&#96;] &#x3D; value;</span><br><span class="line">                        console.log(&#96;$&#123;key&#125;发生了变化&#96;);</span><br><span class="line">                        change(key);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    enumerable: true,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)(key);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;密封 每个属性的configurable:false;</span><br><span class="line">    Object.seal(data);</span><br><span class="line">    console.log(data);</span><br><span class="line">    setInterval(function () &#123;</span><br><span class="line">        data.count +&#x3D; 1;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><h3 id="然后创建虚拟Dom树数组"><a href="#然后创建虚拟Dom树数组" class="headerlink" title="然后创建虚拟Dom树数组"></a>然后创建虚拟Dom树数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [];</span><br><span class="line">&#x2F;&#x2F;定义一个函数，来扫描真实Do树</span><br><span class="line">function getChildren(parent) &#123;</span><br><span class="line">    var children &#x3D; parent.children;</span><br><span class="line">    &#x2F;&#x2F;使用递归遍历出所有Dom树，</span><br><span class="line">    for (var c of children) &#123;</span><br><span class="line">        if (c.children.length &gt; 0) &#123;</span><br><span class="line">            &#x2F;&#x2F;递归调用，如果还有子节点</span><br><span class="line">            arguments.callee(c);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            for (var key of keys) &#123;</span><br><span class="line">                &#x2F;&#x2F;判断内容是不是&#123;&#123;&#125;&#125;的如果是</span><br><span class="line">                if (c.innerHTML &#x3D;&#x3D; &#96;&#123;&#123;$&#123;key&#125;&#125;&#125;&#96;) &#123;</span><br><span class="line">                    &#x2F;&#x2F;将c和c.innerHTML存入数组中，</span><br><span class="line">                    arr.push(&#123;</span><br><span class="line">                        elemt: c,</span><br><span class="line">                        innerHTML: c.innerHTML,</span><br><span class="line">                    &#125;);</span><br><span class="line">                    &#x2F;&#x2F;页面初次渲染时，将对应的属性值赋值给&#123;&#123;&#125;&#125;</span><br><span class="line">                    c.innerHTML &#x3D; data[key];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;传入根节点</span><br><span class="line">getChildren(document.getElementById(&quot;app&quot;));</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><h3 id="创造一个watcher"><a href="#创造一个watcher" class="headerlink" title="创造一个watcher"></a>创造一个watcher</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function change(key) &#123;</span><br><span class="line">    &#x2F;&#x2F;遍历虚拟Dom树，将新值赋值给对应的&#123;&#123;&#125;&#125;</span><br><span class="line">    for (var obj of arr) &#123;</span><br><span class="line">        if (obj.innerHTML &#x3D;&#x3D; &#96;&#123;&#123;$&#123;key&#125;&#125;&#125;&#96;) &#123;</span><br><span class="line">            obj.elemt.innerHTML &#x3D; data[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://yangyue6531267.github.io/yangyue.github.com/img/wx.png" alt="Image text"></p><h3 id="console"><a href="#console" class="headerlink" title="console"></a>console</h3><p><img src="https://yangyue6531267.github.io/yangyue.github.com/img/wx1.png" alt="Image text"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Object-defineProperties-模拟实现Vue的绑定原理&quot;&gt;&lt;a href=&quot;#Object-defineProperties-模拟实现Vue的绑定原理&quot; class=&quot;headerlink&quot; title=&quot;Ob
      
    
    </summary>
    
    
    
      <category term="模拟实现Vue的绑定原理" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0Vue%E7%9A%84%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>机顶盒端字体滚动</title>
    <link href="http://yoursite.com/2019/09/20/%E6%9C%BA%E9%A1%B6%E7%9B%92%E7%AB%AF%E5%AD%97%E4%BD%93%E6%BB%9A%E5%8A%A8/"/>
    <id>http://yoursite.com/2019/09/20/%E6%9C%BA%E9%A1%B6%E7%9B%92%E7%AB%AF%E5%AD%97%E4%BD%93%E6%BB%9A%E5%8A%A8/</id>
    <published>2019-09-20T06:47:44.000Z</published>
    <updated>2020-08-03T09:08:41.153Z</updated>
    
    <content type="html"><![CDATA[<h4 id="字体滚动"><a href="#字体滚动" class="headerlink" title="字体滚动"></a>字体滚动</h4><pre><code>this.marquee = function (status,id) &#123;    # status add 开始 传空清除结束    var scrollLeft = 0;    this.timer &amp;&amp; clearInterval(this.timer);    var div = getId(id);    if (!div) return    if (status == &#39;add&#39;) &#123;      if (div.innerHTML.length &lt; 8) return      scrollLeft = div.offsetWidth      div.style.cssText = &quot;text-indent: &quot; + scrollLeft + &quot;px;text-align: center;text-overflow: clip;&quot;      this.timer = setInterval(function () &#123;        if (scrollLeft &lt;= -div.offsetWidth + 20) &#123;          scrollLeft = div.offsetWidth;          div.style.cssText = &quot;text-indent: &quot; + scrollLeft + &quot;px;text-align: center;text-overflow: clip;&quot;        &#125; else &#123;          scrollLeft += -1;          div.style.cssText = &quot;text-indent: &quot; + scrollLeft + &quot;px;text-align: center;text-overflow: clip;&quot;        &#125;      &#125;, 30);    &#125; else &#123;      if (div.innerHTML.length &gt;= 8) &#123;        scrollLeft = 0;        div.style.cssText = &quot;text-indent: &quot; + scrollLeft + &quot;px;text-align: center;&quot;      &#125;    &#125;  &#125;;#   getId封装获取id的function 内容：return document.getElementById(arg);</code></pre><p><img src="https://yangyue6531267.github.io/yangyue.github.com/v2-7b59f4651e00c9ae7f46367b933d8daf_hd.jpg" alt="Image text"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;字体滚动&quot;&gt;&lt;a href=&quot;#字体滚动&quot; class=&quot;headerlink&quot; title=&quot;字体滚动&quot;&gt;&lt;/a&gt;字体滚动&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;this.marquee = function (status,id) &amp;#123;
    # statu
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue音乐播放器哦</title>
    <link href="http://yoursite.com/2018/08/14/vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%93%A6/"/>
    <id>http://yoursite.com/2018/08/14/vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E5%93%A6/</id>
    <published>2018-08-14T07:45:01.000Z</published>
    <updated>2020-08-03T08:57:31.858Z</updated>
    
    <content type="html"><![CDATA[<p>之前从来没写过vue架构下的播放器，闲来无事小搞一个自娱自乐的音乐播放器</p><p>不多BB，直接上路径，手机端服用更安逸</p><p>More info:<a href="http://ser.caijin.tech:3002/"></a></p><a id="more"></a><p>之前从来没写过vue架构下的播放器，闲来无事小搞一个自娱自乐的音乐播放器</p><p>不多BB，直接上路径，手机端服用更安逸</p><p>More info: <a href="http://ser.caijin.tech:3002/">音乐播放器入口</a></p><p><img src="https://yangyue6531267.github.io/yangyue.github.com/v2-dbc5a1de775e2a582312926d8fe950f7_hd.jpg" alt="Image text"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前从来没写过vue架构下的播放器，闲来无事小搞一个自娱自乐的音乐播放器&lt;/p&gt;
&lt;p&gt;不多BB，直接上路径，手机端服用更安逸&lt;/p&gt;
&lt;p&gt;More info:&lt;a href=&quot;http://ser.caijin.tech:3002/&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
